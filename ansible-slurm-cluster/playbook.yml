---
- name: Set type of playbook execution as fact
  hosts: all
  tasks:
    - set_fact: 
        ansiblepurpose: "{{ lookup('env','ansible_purpose') | default('cluster', true) }}"   # call ansible with -e "purpose=image other_variable=foo"
        clustername: "{{ lookup('env','CLUSTER_NAME') | default('my-cluster', true) }}"

- name: Prepare network access
  # will read ENV to get 
  hosts: localhost
  roles:
    - openstack-network

- name: Launch instances
  hosts: localhost
  pre_tasks:
    - name: Set variables
      set_fact:
        name: "{{ lookup('env','CLUSTER_NAME') | default('my-cluster', true) }}"
        state: "{{ lookup('env','STATE') | default('present', true) }}"
        node_count: "{{ lookup('env', 'NODE_COUNT') | default(3, true) }}"
        master_count: "{{ lookup('env', 'MASTER_COUNT') | default(1, true) }}"
        deploymentsfolder: "{{ lookup('env', 'DEPLOYMENTSFOLDER') | default('/root/app/deployment_xyz', true) }}"
    - name: create .ssh on local host if it does not exisit
      file:
        path: ~/.ssh
        state: directory
    - name: prepare known_hosts on local system to avoid inaccessibilities
      file:
        path: ~/.ssh/known_hosts
        state: touch
        mode: 0600    
  roles:
    - { role: openstack-cluster-security-groups, when: state == 'present' }
    - openstack-cluster-hosts
    - { role: openstack-cluster-security-groups, when: state == 'absent' }

# - name: Write the new instance host keys to known_hosts
#   hosts: localhost
#   gather_facts: no
#   tasks:
#     - command: "ssh-keyscan  -H {{ hostvars[item]['ansible_host'] }}"
#       with_items: 
#         - "{{ groups.cluster_masters }}"
#         - "{{ groups.cluster_nodes }}"
#         - "{{ groups.bastions }}"
#       register: new_host_fingerprint
#       delegate_to: bastion
#       when: state == "present"
#     - lineinfile:
#         dest: ~/.ssh/known_hosts
#         line: "{{ item }}"
#       with_items: new_host_fingerprint.stdout_lines
#       when: state == "present"

#- name: Test availability through bastion and make sure python is available  # TODO this fails the first time on occasion WTF WHY?! And does it really take that long? Longer than terraform?
# gather_facts: no
# hosts: cluster_masters:cluster_nodes
#  become: yes
# roles:
#   - provision-test

- name: Set hostname 
  hosts: cluster_masters:cluster_nodes
  become: yes
  roles:
    - proper-hostname

- name: Set hostnames properly
  hosts: cluster_masters:cluster_nodes
  become: yes
  roles:
     - stouts.hostname

- name: Complete /etc/hosts with IP address of all hosts
  hosts: cluster_masters:cluster_nodes
  become: yes
  tasks:
    - lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_host'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_host'] is defined
      with_items: "{{ groups.cluster_masters + groups.cluster_nodes }}"

- name: Print currently known cluster_masters hostvar info 
  hosts: localhost
  gather_facts: yes
  vars:
     clustername: "{{ lookup('env','CLUSTER_NAME') | default('my-cluster', true) }}" 
  tasks:
  - name: Display all variables/facts known for a host
    debug:
      var: hostvars
      verbosity: 4

# - name: Set up docker 
#   hosts: cluster_masters:cluster_nodes
#   become: yes
#   vars: {docker_edition: 'ce', docker_package: "docker-{{ docker_edition }}", docker_package_state: present}
#   roles:
#     - geerlingguy.docker

# - name: Install java
#   hosts: cluster_masters:cluster_nodes
#   become: yes
#   roles:
#     - geerlingguy.java

# - name: Install nextflow
#  become: yes
#  hosts: cluster_masters
#  tasks:
#    - name: curl nextflow 
#      shell: "curl -s https://get.nextflow.io | bash"
#      register: nextflowcurloutput

- name: Set hostnames properly
  hosts: cluster_masters:cluster_nodes
  become: yes
  roles:
    - stouts.hostname

- name: Complete /etc/hosts with IP address of all hosts
  hosts: cluster_masters:cluster_nodes
  become: yes
  tasks:
    - lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item]['ansible_host'] }} {{item}}"
        state: present
      when: hostvars[item]['ansible_host'] is defined
      with_items: "{{ groups.all }}"


...